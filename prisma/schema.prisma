// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment{
  id   String @id @default(uuid())
  name String
  email String
  phone String
  appointmentDate DateTime
  time  String
  serviceId String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service Service @relation(fields: [serviceId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Reminder{
  id   String @id @default(uuid())
  description String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User@relation(fields: [userId], references: [id])
}

model Service {
  id      String  @id @default(uuid())
  name    String
  price   Int
  duration Int
  userId  String
  status  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  appointments Appointment[]
}

enum Plan{
  BASIC
  PROFESSIONAL
}

model Subscription{
  id          String @id @default(uuid())
  status      String
  plan        Plan
  priceId     String
  userId    String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  address       String?         @default("")
  phone         String?         @default("")
  status        Boolean         @default(true)
  timeZone      String?
  accounts      Account[]
  sessions      Session[]
  stripe_customer_id String?
  subscription  Subscription?
  services Service[]
  reminders  Reminder[]
  authenticator Authenticator[]
  appointment Appointment[]
  times String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
